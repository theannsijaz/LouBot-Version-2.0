<?xml version="1.0" encoding="UTF-8"?>
<aiml version="2.0">

<!-- ===================================================== -->
<!-- SEMANTIC MEMORY AIML                                 -->
<!-- Handles knowledge facts and learned information      -->
<!-- ===================================================== -->

<!-- Knowledge Storage and Retrieval -->
<category>
    <pattern>LEARN THAT *</pattern>
    <template>
        <python>
            fact = "<star/>"
            from Memory.views import store_semantic_knowledge
            try:
                session = bot.getSessionData(sessionID, "session")
                store_semantic_knowledge(session, fact)
                return f"I've learned that {fact}. I'll remember this knowledge."
            except:
                return f"I'm having trouble learning that {fact}."
        </python>
    </template>
</category>

<category>
    <pattern>REMEMBER THAT *</pattern>
    <template><srai>LEARN THAT <star/></srai></template>
</category>

<category>
    <pattern>* IS *</pattern>
    <template>
        <python>
            subject = "<star index='1'/>"
            predicate = "<star index='2'/>"
            fact = f"{subject} is {predicate}"
            from Memory.views import store_semantic_knowledge
            try:
                session = bot.getSessionData(sessionID, "session")
                store_semantic_knowledge(session, fact)
                return f"I've learned that {fact}."
            except:
                return f"I'm having trouble learning that {fact}."
        </python>
    </template>
</category>

<!-- Knowledge Queries -->
<category>
    <pattern>WHAT DO YOU KNOW ABOUT *</pattern>
    <template>
        <python>
            topic = "<star/>".lower()
            from Memory.views import get_semantic_knowledge
            try:
                session = bot.getSessionData(sessionID, "session")
                knowledge = get_semantic_knowledge(session, topic)
                if knowledge:
                    return f"About {topic}, I know: {', '.join(knowledge[:3])}{'...' if len(knowledge) > 3 else ''}"
                else:
                    return f"I don't have any specific knowledge about {topic} yet."
            except:
                return f"I'm having trouble retrieving knowledge about {topic}."
        </python>
    </template>
</category>

<category>
    <pattern>TELL ME ABOUT *</pattern>
    <template><srai>WHAT DO YOU KNOW ABOUT <star/></srai></template>
</category>

<category>
    <pattern>WHAT IS *</pattern>
    <template>
        <python>
            topic = "<star/>".lower()
            from Memory.views import get_semantic_knowledge
            try:
                session = bot.getSessionData(sessionID, "session")
                knowledge = get_semantic_knowledge(session, topic)
                if knowledge:
                    definitions = [k for k in knowledge if 'is' in k.lower()]
                    if definitions:
                        return definitions[0]
                    else:
                        return f"I know some things about {topic}: {knowledge[0]}"
                else:
                    return f"I don't know what {topic} is. Could you teach me?"
            except:
                return f"I'm having trouble finding information about {topic}."
        </python>
    </template>
</category>

<!-- Drone and Flight Knowledge -->
<category>
    <pattern>WHAT DO YOU KNOW ABOUT FLYING</pattern>
    <template>
        <python>
            from Memory.views import get_flight_knowledge
            try:
                session = bot.getSessionData(sessionID, "session")
                knowledge = get_flight_knowledge(session)
                if knowledge:
                    return f"About flying, I know: {', '.join(knowledge)}"
                else:
                    return "I'm still learning about flying through our experiences together."
            except:
                return "I'm having trouble accessing my flight knowledge."
        </python>
    </template>
</category>

<category>
    <pattern>WHAT HAVE YOU LEARNED ABOUT DRONES</pattern>
    <template>
        <python>
            from Memory.views import get_drone_knowledge
            try:
                session = bot.getSessionData(sessionID, "session")
                knowledge = get_drone_knowledge(session)
                if knowledge:
                    return f"About drones, I've learned: {', '.join(knowledge)}"
                else:
                    return "I'm still learning about drones through our interactions."
            except:
                return "I'm having trouble accessing my drone knowledge."
        </python>
    </template>
</category>

<!-- Object Recognition Knowledge -->
<category>
    <pattern>WHAT OBJECTS CAN YOU RECOGNIZE</pattern>
    <template>
        <python>
            try:
                from Sensory_Memory.yolo_detector import get_yolo_detector
                detector = get_yolo_detector()
                if detector.is_available():
                    # YOLOv8 can detect 80+ COCO classes
                    objects = [
                        "person", "bicycle", "car", "motorcycle", "airplane", "bus", "train", "truck",
                        "boat", "traffic light", "fire hydrant", "stop sign", "parking meter", "bench",
                        "bird", "cat", "dog", "horse", "sheep", "cow", "elephant", "bear", "zebra",
                        "giraffe", "backpack", "umbrella", "handbag", "tie", "suitcase", "frisbee",
                        "skis", "snowboard", "sports ball", "kite", "baseball bat", "baseball glove",
                        "skateboard", "surfboard", "tennis racket", "bottle", "wine glass", "cup",
                        "fork", "knife", "spoon", "bowl", "banana", "apple", "sandwich", "orange",
                        "broccoli", "carrot", "hot dog", "pizza", "donut", "cake", "chair", "couch",
                        "potted plant", "bed", "dining table", "toilet", "tv", "laptop", "mouse",
                        "remote", "keyboard", "cell phone", "microwave", "oven", "toaster", "sink",
                        "refrigerator", "book", "clock", "scissors", "teddy bear", "hair drier", "toothbrush"
                    ]
                    return f"I can recognize {len(objects)} different types of objects including: {', '.join(objects[:10])}... and many more!"
                else:
                    return "My object recognition system is not currently available."
            except:
                return "I'm having trouble accessing my object recognition capabilities."
        </python>
    </template>
</category>

<category>
    <pattern>CAN YOU RECOGNIZE *</pattern>
    <template>
        <python>
            object_name = "<star/>".lower()
            # Common COCO dataset objects that YOLOv8 can detect
            recognizable_objects = [
                "person", "bicycle", "car", "motorcycle", "airplane", "bus", "train", "truck",
                "boat", "traffic light", "fire hydrant", "stop sign", "parking meter", "bench",
                "bird", "cat", "dog", "horse", "sheep", "cow", "elephant", "bear", "zebra",
                "giraffe", "backpack", "umbrella", "handbag", "tie", "suitcase", "frisbee",
                "bottle", "wine glass", "cup", "fork", "knife", "spoon", "bowl", "banana",
                "apple", "sandwich", "orange", "chair", "couch", "bed", "tv", "laptop",
                "cell phone", "book", "clock", "scissors", "teddy bear"
            ]
            
            if object_name in recognizable_objects:
                return f"Yes, I can recognize {object_name}s in my field of view."
            else:
                return f"I'm not sure if I can recognize {object_name}. I can detect {len(recognizable_objects)} different types of common objects."
        </python>
    </template>
</category>

<!-- Learning from Experience -->
<category>
    <pattern>WHAT HAVE YOU LEARNED TODAY</pattern>
    <template>
        <python>
            from Memory.views import get_todays_learning
            try:
                session = bot.getSessionData(sessionID, "session")
                learning = get_todays_learning(session)
                if learning:
                    return f"Today I've learned: {', '.join(learning)}"
                else:
                    return "I haven't learned any new facts today yet. Teach me something!"
            except:
                return "I'm having trouble accessing what I've learned today."
        </python>
    </template>
</category>

<!-- Knowledge Categories -->
<category>
    <pattern>HOW MUCH DO YOU KNOW</pattern>
    <template>
        <python>
            from Memory.views import get_knowledge_stats
            try:
                session = bot.getSessionData(sessionID, "session")
                stats = get_knowledge_stats(session)
                return f"I have {stats.get('total_facts', 0)} facts in my knowledge base, covering {stats.get('topics', 0)} different topics."
            except:
                return "I'm still building up my knowledge base from our interactions."
        </python>
    </template>
</category>

<category>
    <pattern>KNOWLEDGE STATUS</pattern>
    <template><srai>HOW MUCH DO YOU KNOW</srai></template>
</category>

<!-- Teaching and Learning -->
<category>
    <pattern>I WILL TEACH YOU ABOUT *</pattern>
    <template>
        <python>
            topic = "<star/>"
            return f"Great! I'm ready to learn about {topic}. Please tell me what you know."
        </python>
    </template>
</category>

<category>
    <pattern>LET ME TEACH YOU *</pattern>
    <template><srai>I WILL TEACH YOU ABOUT <star/></srai></template>
</category>

<!-- Fact Verification -->
<category>
    <pattern>IS IT TRUE THAT *</pattern>
    <template>
        <python>
            statement = "<star/>"
            from Memory.views import verify_knowledge
            try:
                session = bot.getSessionData(sessionID, "session")
                result = verify_knowledge(session, statement)
                if result:
                    return f"Yes, I believe that's true. I have that information in my knowledge base."
                else:
                    return f"I don't have information to confirm that. Could you teach me about it?"
            except:
                return f"I'm having trouble verifying that information."
        </python>
    </template>
</category>

<!-- Semantic Relationships -->
<category>
    <pattern>HOW IS * RELATED TO *</pattern>
    <template>
        <python>
            concept1 = "<star index='1'/>"
            concept2 = "<star index='2'/>"
            from Memory.views import find_semantic_relationship
            try:
                session = bot.getSessionData(sessionID, "session")
                relationship = find_semantic_relationship(session, concept1, concept2)
                if relationship:
                    return f"{concept1} and {concept2} are related: {relationship}"
                else:
                    return f"I don't know how {concept1} and {concept2} are related. Could you explain?"
            except:
                return f"I'm having trouble finding the relationship between {concept1} and {concept2}."
        </python>
    </template>
</category>

<!-- Conceptual Understanding -->
<category>
    <pattern>EXPLAIN *</pattern>
    <template>
        <python>
            concept = "<star/>"
            from Memory.views import get_concept_explanation
            try:
                session = bot.getSessionData(sessionID, "session")
                explanation = get_concept_explanation(session, concept)
                if explanation:
                    return explanation
                else:
                    return f"I don't have a good explanation for {concept} yet. Could you help me understand it?"
            except:
                return f"I'm having trouble explaining {concept}."
        </python>
    </template>
</category>

<!-- Knowledge Gaps -->
<category>
    <pattern>WHAT DONT YOU KNOW</pattern>
    <template>
        There's so much I still don't know! I'm constantly learning from our interactions. Ask me about anything, and if I don't know it, I'd love to learn from you.
    </template>
</category>

<category>
    <pattern>WHAT DO YOU WANT TO LEARN</pattern>
    <template>
        I'm curious about everything! I'd especially like to learn more about the world you live in, your experiences, and anything that helps me be a better assistant to you.
    </template>
</category>

<!-- Context-Aware Learning -->
<category>
    <pattern>THIS IS A *</pattern>
    <template>
        <python>
            object_name = "<star/>"
            from Memory.views import store_object_knowledge, get_current_detections
            try:
                session = bot.getSessionData(sessionID, "session")
                # Store the knowledge
                store_object_knowledge(session, object_name)
                
                # Check if we can see it
                detections = get_current_detections()
                if detections:
                    return f"Thank you! I'll remember that this is a {object_name}. I can see objects in my field of view right now, so I'm learning from visual context too."
                else:
                    return f"Thank you! I'll remember that this is a {object_name}."
            except:
                return f"Thank you for teaching me about {object_name}!"
        </python>
    </template>
</category>

</aiml> 